# -*- coding: utf-8 -*-
"""airqualitymachinlearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fs_GbZtC-3r9MT5-sIy6Ed2fn3IMk4QL
"""

import pandas as pd
import numpy as np

import pandas as pd
df = pd.read_excel("AirQualityUCI.xlsx", sheet_name="AirQualityUCI")
df.head()

df.isin([-200]).sum(axis=0)

df=df.replace(to_replace=-200,value=np.nan)

df.isnull().sum()

# تعويض القيم المفقودة بالمتوسط فقط للأعمدة الرقمية
df = df.fillna(df.select_dtypes(include="number").mean())

df.isnull().sum()

# حذف الأعمدة Date و Time لو موجودة
if "Date" in df.columns:
    df = df.drop(columns=["Date"])
if "Time" in df.columns:
    df = df.drop(columns=["Time"])

# الهدف (Target)
y = df["CO(GT)"]

# المتغيرات المستقلة (Features)
X = df.drop(columns=["CO(GT)"])

print("X shape:", X.shape)
print("y shape:", y.shape)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

print("Train:", X_train.shape, y_train.shape)
print("Test:", X_test.shape, y_test.shape)



from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.metrics import mean_squared_error

# بناء الموديل
model = LinearRegression()
model.fit(X_train, y_train)

# التنبؤ
y_pred = model.predict(X_test)



# تقييم الأداء
print("LinearRegression()")
print("R²:", r2_score(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MSE",mean_squared_error(y_test, y_pred))

from sklearn.tree import DecisionTreeRegressor

model = DecisionTreeRegressor(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# تقييم الأداء
print("DecisionTreeRegressor")
print("R²:", r2_score(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MSE",mean_squared_error(y_test, y_pred))

from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# تقييم الأداء
print("RandomForestRegressor")
print("R²:", r2_score(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MSE",mean_squared_error(y_test, y_pred))

"""Gradient Boosting Regressor (زي XGBoost / LightGBM)
قوي جداً خصوصاً لو الداتا كبيرة ومعقدة.
"""

from sklearn.ensemble import GradientBoostingRegressor

model = GradientBoostingRegressor(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# تقييم الأداء
print("GradientBoostingRegressor")
print("R²:", r2_score(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MSE",mean_squared_error(y_test, y_pred))

from sklearn.svm import SVR

model = SVR(kernel='rbf')
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# تقييم الأداء
print("SVR")
print("R²:", r2_score(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MSE",mean_squared_error(y_test, y_pred))

from sklearn.linear_model import Ridge, Lasso

model = Ridge(alpha=1.0)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)


# تقييم الأداء
print("Ridge,lasso")
print("R²:", r2_score(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MSE",mean_squared_error(y_test, y_pred))

import numpy as np
import pandas as pd
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR

# تعريف الموديلات
models = {
    "Linear Regression": LinearRegression(),
    "Ridge Regression": Ridge(alpha=1.0),
    "Lasso Regression": Lasso(alpha=0.01),
    "Decision Tree": DecisionTreeRegressor(random_state=42),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(random_state=42),
    "SVR": SVR(kernel='rbf')
}

# لتخزين النتائج
results = []

# تجربة كل موديل
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)

    results.append([name, r2, mae, mse])

# تحويل النتائج لجدول
results_df = pd.DataFrame(results, columns=["Model", "R²", "MAE", "MSE"])

print(results_df)

from sklearn.ensemble import RandomForestRegressor
import joblib  # لحفظ الموديل

# تدريب الموديل
model = RandomForestRegressor(n_estimators=200, max_depth=20, random_state=42)
model.fit(X_train, y_train)

# حفظ الموديل
joblib.dump(model, "best_model.pkl")

!pip install streamlit
!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import joblib
# 
# # تحميل الموديل
# model = joblib.load("best_model.pkl")
# 
# st.title("🌍 التنبؤ بجودة الهواء باستخدام Random Forest")
# 
# region = st.selectbox("اختر المنطقة:", ["Irbid", "Amman", "Zarqa", "Aqaba"])
# gas = st.selectbox("اختر الغاز:", ["CO", "NO2", "SO2", "O3", "PM10"])
# 
# value1 = st.number_input("ادخل قيمة المتغير 1", min_value=0.0, max_value=500.0, value=10.0)
# value2 = st.number_input("ادخل قيمة المتغير 2", min_value=0.0, max_value=500.0, value=20.0)
# 
# region_map = {"Irbid": 0, "Amman": 1, "Zarqa": 2, "Aqaba": 3}
# gas_map = {"CO": 0, "NO2": 1, "SO2": 2, "O3": 3, "PM10": 4}
# 
# X_new = [[region_map[region], gas_map[gas], value1, value2]]
# 
# if st.button("تنبؤ"):
#     prediction = model.predict(X_new)
#     st.success(f"القيمة المتوقعة: {prediction[0]:.2f}")
#

from pyngrok import ngrok

# تشغيل streamlit
!streamlit run app.py &

# فتح رابط ngrok
url = ngrok.connect(8501)
print("رابط التطبيق:", url)

